{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Anthr\\\\wcd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Anthr\\\\wcd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\nimport fetch from \"node-fetch\";\nimport { config } from \"../Config\";\nexport var fetchPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"\".concat(config.baseUrl, \"/posts\"));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error(\"fetchPosts error - \".concat(_context.t0));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  }));\n\n  return function fetchPosts() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchCategories = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"\".concat(config.baseUrl, \"/categories\"));\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return res.json();\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw new Error(\"fetchCategories error - \".concat(_context2.t0));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function fetchCategories() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Anthr/wcd/api/Summary/index.ts"],"names":["dotenv","config","fetch","fetchPosts","baseUrl","res","json","Error","fetchCategories"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACAA,MAAM,CAACC,MAAP;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,SAASD,MAAT,QAAuB,WAAvB;AAEA,OAAO,IAAME,UAAU;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEND,KAAK,WAAID,MAAM,CAACG,OAAX,YAFC;;AAAA;AAElBC,YAAAA,GAFkB;AAAA;AAAA,mBAGXA,GAAG,CAACC,IAAJ,EAHW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAKlB,IAAIC,KAAJ,2CALkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVJ,UAAU;AAAA;AAAA;AAAA,GAAhB;AASP,OAAO,IAAMK,eAAe;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXN,KAAK,WAAID,MAAM,CAACG,OAAX,iBAFM;;AAAA;AAEvBC,YAAAA,GAFuB;AAAA;AAAA,mBAGhBA,GAAG,CAACC,IAAJ,EAHgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAKvB,IAAIC,KAAJ,iDALuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfC,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\nimport fetch from \"node-fetch\";\r\nimport { Category, Post } from \"../../shared/types\";\r\nimport { config } from \"../Config\";\r\n\r\nexport const fetchPosts = async (): Promise<Post[]> => {\r\n\ttry {\r\n\t\tconst res = await fetch(`${config.baseUrl}/posts`);\r\n\t\treturn await res.json();\r\n\t} catch (error) {\r\n\t\tthrow new Error(`fetchPosts error - ${error}`);\r\n\t}\r\n};\r\n\r\nexport const fetchCategories = async (): Promise<Category[]> => {\r\n\ttry {\r\n\t\tconst res = await fetch(`${config.baseUrl}/categories`);\r\n\t\treturn await res.json();\r\n\t} catch (error) {\r\n\t\tthrow new Error(`fetchCategories error - ${error}`);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}